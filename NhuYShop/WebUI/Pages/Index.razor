@page "/"
@using Newtonsoft.Json.Linq
@inject IToastService toastService
<h3>Danh sách đơn hàng</h3>
<div class="col-lg-12 control-section">
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
            <NavLink href="addorder">
                <button class="btn btn-primary">Thêm đơn hàng</button>
            </NavLink>
            <button class="btn btn-warning" @onclick="OrderNotComfirm">Các đơn chưa đăng</button>
        </div>
    </div>
    <div class="content-wrapper">
        <div class="table-responsive">
            @if (orders.Count == 0)
            {
                <div class="text-center">
                    <p><em>Empty...</em></p>
                </div>
            }
            else
            {
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th class="text-center">Đăng đơn</th>
                            <th class="text-center">ID</th>
                            <th class="text-center">CTV</th>
                            <th class="text-center">Tên KH</th>
                            <th class="text-center">Số ĐT</th>
                            <th class="text-center">Địa chỉ</th>
                            <th class="text-center">Chi tiết</th>
                            <th class="text-center">Tổng tiền</th>
                            <th class="text-center">Hoa hồng</th>
                            <th class="text-center">Freeship?</th>
                            <th class="text-center">Ngày tạo</th>
                            <th class="text-center">Chỉnh sửa</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in orders)
                        {
                        <tr>
                            @if (item.is_completed && item.orther_type.Contains("Thu hộ"))
                            {
                                <td class="text-center">
                                    <button class="btn btn-secondary" disabled>Thu hộ</button>
                                </td>
                            }
                            else if (item.is_completed && item.orther_type.Contains("Chuyển"))
                            {
                                <td class="text-center">
                                    <button class="btn btn-danger" disabled>Chuyển</button>
                                </td>
                            }
                            else if (item.is_completed && item.orther_type.Contains("Tiền mặt"))
                            {
                                <td class="text-center">
                                    <button class="btn btn-success" disabled>Tiền mặt</button>
                                </td>
                            }
                            else if (item.is_completed)
                            {
                                <td class="text-center">
                                    <button class="btn btn-dark" disabled>Đã đăng</button>
                                </td>
                            }
                            else if(!item.is_completed)
                            {
                                <td class="text-center">
                                    <button class="btn btn-warning" @onclick="@(() => OpenModal(item.ID))">Đăng</button>
                                </td>
                            }
                            <td class="text-center">@item.ID</td>
                            <td class="text-center">@item.CREATEUSER</td>
                            <td>@item.customer_name</td>
                            <td class="text-center">@item.customer_tel</td>
                            <td>@item.customer_address</td>
                            <td>@item.detail</td>
                            <td class="text-center">@item.value.ToString("#,###")</td>
                            <td class="text-center">@item.commission.ToString("#,###")</td>
                            <td class="text-center">
                                @(item.is_freeship ? "Có" : "Không")
                            </td>
                            <td>@item.CREATEDATE</td>
                            <td class="text-center">
                                <NavLink href="@item.ID">
                                    <button class="btn btn-info">Sửa</button>
                                </NavLink>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>

            }
        </div>
    </div>
</div>
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    @if (order != null)
    {
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Đăng đơn #@order.ID</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                            <p><b>Tên khách hàng: </b>@order.customer_name</p>
                        </div>
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                            <p><b>Số điện thoại: </b>@order.customer_tel</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <p><b>Địa chỉ: </b>@order.customer_address</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <p><b>Kho lấy hàng: </b>@order.pickaddress_name</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                            <p><b>Chi tiết: </b>@order.detail</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                            <p><b>Loại vận chuyển: </b>@(order.delivery_option_id == "road" ? "Thường" : "Bay")</p>
                        </div>
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                            <p><b>Freeship: </b>@(order.is_freeship ? "Có" : "Không")</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                            <p><b>Số tiền: </b>@order.value.ToString("#,###")</p>
                            <p><b>Phí vận chuyển: </b>@order.feeship.ToString("#,###")</p>
                        </div>
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                            <p>
                                <b>Khối lượng(kg): </b><input type="number" class="form-control" step="0.2" @onchange="@OnChangeWeight" value="@weight">
                            </p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <p style="margin-right:100px;"><b>Thực thu: </b>@(order.is_freeship ? (order.value - order.feeship).ToString("#,###") : order.value.ToString("#,###"))</p>
                    <button type="button" class="btn btn-primary" @onclick="PostOrder">Đăng</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal">Đóng</button>
                </div>
            </div>
        </div>
    }
</div>
<div id="Notification" class="modal @ModalClass2" tabindex="-1" role="dialog" style="display:@ModalDisplay2">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="CloseModal2" aria-label="Close" >
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @ModalBody
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal2">Close</button>
            </div>
        </div>
    </div>
</div>
<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="2"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

@code {
    private OrderDAO orderDAO = new OrderDAO();
    private List<OrderModel> orders = new List<OrderModel>();
    private OrderModel order { get; set; }
    string orderID { get; set; }
    double weight { get; set; }

    protected override async Task OnInitializedAsync()
    {
        orders = await orderDAO.GetAllOrder();
    }

    public void OrderNotComfirm()
    {
        orders = orders.OrderBy(x=>x.is_completed).ToList();
        StateHasChanged();
    }

    #region Modal
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public async void OpenModal(string ID)
    {
        order = new OrderModel();
        order = await orderDAO.GetOrder(ID);
        weight = Convert.ToDouble(order.weight) / 1000;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void CloseModal()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    #endregion

    #region Modal Notifycation
    public Guid Guid2 = Guid.NewGuid();
    public string ModalDisplay2 = "none;";
    public string ModalClass2 = "";
    public bool ShowBackdrop2 = false;
    public string ModalTitle = null;
    public string ModalBody = null;

    public void OpenModal2()
    {

        ModalDisplay2 = "block;";
        ModalClass2 = "Show";
        ShowBackdrop2 = true;
        StateHasChanged();
    }

    public void CloseModal2()
    {
        ModalDisplay2 = "none";
        ModalClass2 = "";
        ShowBackdrop2 = false;
        StateHasChanged();
    }
    #endregion

    public void OnChangeWeight(ChangeEventArgs e)
    {
        order.weight = Decimal.ToInt32(Decimal.Parse(e.Value.ToString().Replace(".", ",")) * 1000);
        ReloadFeeShip();
    }

    #region Phí ship
    public void ReloadFeeShip()
    {
        GetFeeDelivery getfee = new GetFeeDelivery();
        getfee.pick_address_id = order.pickaddress_id;
        getfee.province = order.customer_province;
        getfee.district = order.customer_distrist;
        getfee.ward = order.customer_ward;
        getfee.street = order.customer_street;
        getfee.weight = order.weight;
        getfee.transport = order.delivery_option_id;
        var a = JsonConvert.SerializeObject(getfee);
        var json = UploadOrderService.PostUpOrderRestAPI("https://services.giaohangtietkiem.vn/services/shipment/fee?", getfee);
        if (json.SelectToken("fee").SelectToken("fee").ToString() != order.feeship.ToString())
        {
            toastService.ShowWarning("Phí ship mới là: " + json.SelectToken("fee").SelectToken("fee").ToString());
            order.feeship = Int32.Parse(json.SelectToken("fee").SelectToken("fee").ToString());
        }

    }

    public class GetFeeDelivery
    {
        public string pick_address_id { get; set; }
        public string province { get; set; }
        public string district { get; set; }
        public string ward { get; set; }
        public string street { get; set; }
        public int weight { get; set; }
        public string transport { get; set; }
    }

    #endregion

    public async void PostOrder()
    {
        var json = UpdateValue();

        if (json.SelectToken("success").Value<bool>() == true)
        {
            if (json.SelectToken("order") != null)
            {
                ModalTitle = json.SelectToken("order").SelectToken("label").Value<string>();
                ModalBody = json.SelectToken("message").Value<string>();
                order.is_completed = true;
                await orderDAO.UpdateOrder(order);
                orders = await orderDAO.GetAllOrder();
                OpenModal2();

            }
        }
        else
        {
            if (json.SelectToken("error") != null)
            {
                ModalTitle = json.SelectToken("error").SelectToken("ghtk_label").Value<string>();
                ModalBody = json.SelectToken("message").Value<string>();
                OpenModal2();
            }
            if (json.SelectToken("message") != null && json.SelectToken("error") == null)
            {
                toastService.ShowError(json.SelectToken("message").Value<string>());
            }
        }
    }

    public JObject UpdateValue()
    {
        Product pro = new Product();
        Order orderup = new Order();
        //Product
        pro.name = order.detail;
        pro.quantity = 1;
        pro.weight_option = "gram";
        pro.weight = Convert.ToDecimal(order.weight) / 1000;

        //Order
        orderup.id = order.ID;
        orderup.is_freeship = Convert.ToInt32(order.is_freeship);
        //orderup.pick_address_id = add.pick_address_id.ToString();
        orderup.pick_province = "Đắk Lắc";
        orderup.pick_district = "Krông Pắc";
        orderup.pick_ward = "Ea Kênh";
        orderup.pick_street = "Đội Thanh Niên, Thôn Tân Mỹ";
        orderup.pick_address = orderup.pick_street + ", " + orderup.pick_ward + ", " + orderup.pick_district + ", " + orderup.pick_province;
        orderup.pick_tel = "0349570699";
        orderup.pick_name = "Shop mầm non Như Ý";
        orderup.pick_email = "tranhuyhoang.actvn@gmail.com";

        orderup.name = order.customer_name;
        orderup.province = order.customer_province;
        orderup.district = order.customer_distrist;
        orderup.ward = order.customer_ward;
        orderup.street = order.customer_street;
        orderup.address = order.customer_address;
        orderup.tel = order.customer_tel;
        orderup.hamlet = "Khác";
        orderup.pick_money = order.value;
        orderup.transport = order.delivery_option_id;

        //UploadOrder
        UploadOrder up = new UploadOrder();
        Product[] product_array = new Product[1];
        product_array[0] = new Product { name = pro.name, quantity = pro.quantity, weight = pro.weight };
        up.products = product_array;
        up.order = orderup;
        var a = JsonConvert.SerializeObject(up);
        //API môi trường thật:  https://services.giaohangtietkiem.vn/services/shipment/order
        //API sandbox: https://services.ghtklab.com/services/shipment/order
        var json = UploadOrderService.PostUpOrderRestAPI("https://services.giaohangtietkiem.vn/services/shipment/order", up);
        return json;
    }

    public class UploadOrder
    {
        public Product[] products { get; set; }
        public Order order { get; set; }
    }
    public class Product
    {
        public string name { get; set; }
        public decimal weight { get; set; }
        public int quantity { get; set; }
        public string weight_option { get; set; }
    }
    public class Order
    {
        public string id { get; set; }
        public string pick_name { get; set; }
        public int pick_money { get; set; }
        public string pick_address_id { get; set; }
        public string pick_address { get; set; }
        public string pick_province { get; set; }
        public string pick_district { get; set; }
        public string pick_ward { get; set; }
        public string pick_street { get; set; }
        public string pick_tel { get; set; }
        public string pick_email { get; set; }
        public string name { get; set; }
        public string address { get; set; }
        public string province { get; set; }
        public string district { get; set; }
        public string ward { get; set; }
        public string street { get; set; }
        public string hamlet { get; set; }
        public string tel { get; set; }
        public string note { get; set; }
        public string email { get; set; }
        //public int use_return_address { get; set; }
        //public string? return_name { get; set; }
        //public string? return_address { get; set; }
        //public string? return_province { get; set; }
        //public string? return_district { get; set; }
        //public string? return_ward { get; set; }
        //public string? return_street { get; set; }
        //public string? return_tel { get; set; }
        //public string? return_email { get; set; }
        public int is_freeship { get; set; }
        //public string? weight_option { get; set; }
        //public decimal? total_weight { get; set; }
        //public int? pick_work_shift { get; set; }
        //public int? deliver_work_shift { get; set; }
        //public string? label_id { get; set; }
        //public DateTime? pick_date { get; set; }
        //public DateTime? deliver_date { get; set; }
        //public DateTime? expired { get; set; }
        //public int? value { get; set; }
        //public int? opm { get; set; }
        //public string? pick_option { get; set; }
        //public string? actual_transfer_method { get; set; }
        public string transport { get; set; }
        //public string? deliver_option { get; set; }
        //public string? pick_session { get; set; }
    }
}
